import { watch } from 'vue'
import { createRouter, createWebHistory, type RouteRecordRaw } from 'vue-router'
import { supabase } from '@/supabase'

import { useAuthStore } from '@/stores/auth'

const routes: RouteRecordRaw[] = [
  { path: '/', name: 'home', component: () => import('@/views/Home.vue') },

  // --- AUTH ---
  { path: '/login', component: () => import('@/views/auth/Login.vue'), meta: { guestOnly: true } },
  {
    path: '/register',
    component: () => import('@/views/auth/Register.vue'),
    meta: { guestOnly: true }
  },
  {
    path: '/reset-password',
    component: () => import('@/views/auth/ResetPassword.vue'),
    meta: { guestOnly: true }
  },
  {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø–∏—Å—å–º–∞ (Supabase recovery)
    path: '/change-password',
    component: () => import('@/views/auth/ChangePassword.vue'),
    meta: { guestOnly: true, allowRecovery: true } // üëà –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É
  },

  // --- ACCOUNT ---
  {
    path: '/account/change-password',
    component: () => import('@/views/account/ChangePassword.vue'),
    meta: { requiresAuth: true }
  },

  // --- SHOP ---
  { path: '/catalog/:gender(men|women)', component: () => import('@/views/Catalog.vue') },
  { path: '/product/:id', component: () => import('@/views/Product.vue') },
  { path: '/cart', component: () => import('@/views/Cart.vue') },
  { path: '/wishlist', component: () => import('@/views/Wishlist.vue') },

  { path: '/orders', component: () => import('@/views/Orders.vue'), meta: { requiresAuth: true } },
  {
    path: '/checkout',
    component: () => import('@/views/Checkout.vue'),
    meta: { requiresAuth: true }
  },
  {
    path: '/success',
    component: () => import('@/views/Success.vue'),
    meta: { requiresAuth: true }
  },

  // --- 404 ---
  { path: '/:pathMatch(.*)*', component: () => import('@/views/NotFound.vue') }
]

const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes })

router.beforeEach(async (to) => {
  const auth = useAuthStore()

  // –¥–æ–∂–¥–∞—Ç—å—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ auth watcher
  if (!auth.ready) {
    await new Promise<void>((resolve) => {
      const stop = watch(
        () => auth.ready,
        (v) => {
          if (v) {
            stop()
            resolve()
          }
        },
        { immediate: true }
      )
    })
  }

  // ---------------------
  // üîê 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ requiresAuth
  // ---------------------
  if (to.meta.requiresAuth && !auth.isAuthed)
    return { path: '/login', query: { redirect: to.fullPath } }

  // ---------------------
  // üö´ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ guestOnly
  // ---------------------
  if (to.meta.guestOnly && auth.isAuthed) {
    // ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è (recovery session)
    if (to.meta.allowRecovery) {
      try {
        const { data } = await supabase.auth.getSession()
        const recoverySentAt = data.session?.user?.recovery_sent_at
        if (recoverySentAt) return true // —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è recovery-—Å–µ—Å—Å–∏—è
      } catch {
        // –µ—Å–ª–∏ supabase –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–µ—Å—Å–∏—é, fallback
      }
    }
    // –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö guestOnly ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–æ–º–æ–π
    return { path: '/' }
  }

  return true
})

export default router
